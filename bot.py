# coding: utf-8

from telegram.ext import Updater
from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, Filters
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import os
import time
from redis import StrictRedis
import boto3
from botocore.client import Config
import requests


logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

UP_ICON = 'üëç'
MAN_ICON = 'üïµ'
DONE_ICON = '‚úÖ'
ROBOT_ICON = 'ü§ñ'
PIZZA_ICON = 'üçï'
CARD_ICON = 'üí≥'
RESET_ICON = 'üóë'
HAND_ICON = '‚úç'

MODE = os.environ.get('MODE', 'polling')
URL = os.environ.get('URL')
TOKEN = os.environ.get('TOKEN')
PORT = int(os.environ.get('PORT', '5000'))
REDIS_URL = os.environ.get('REDIS_URL')
AWS_REGION = os.environ.get('AWS_REGION', 'eu-central-1')
AWS_S3_BUCKET = os.environ.get('AWS_S3_BUCKET')
OPENOCR_URL = os.environ.get('OPENOCR_URL', 'http://192.168.99.100:9292/ocr')

# redis hash keys templates
USER_KEY = 'user_{}'
CHAT_MESSAGE_OWNER_KEY = 'chat_{}_message_{}_owner'
CHAT_MESSAGE_STATUS_KEY = 'chat_{}_message_{}_status'
CHAT_MESSAGE_ITEMS_KEY = 'chat_{}_message_{}_items'
CHAT_MESSAGE_DONE_KEY = 'chat_{}_message_{}_done'
CHAT_MESSAGE_PAID_KEY = 'chat_{}_message_{}_paid'
CHAT_MESSAGE_ITEM_KEY = 'chat_{}_message_{}_item_{}'
CHAT_MESSAGE_ITEM_USERS_KEY = 'chat_{}_message_{}_item_{}_users'

OPEN_STATUS = 'open'
WAIT_PAYMENTS_STATUS = 'wait_payments'
CLOSED_STATUS = 'closed'

DONE_BUTTON = 'done'
PAID_BUTTON = 'paid'
CLOSE_BUTTON = 'close'
RESET_BUTTON = 'reset'

redis_client = StrictRedis.from_url(REDIS_URL)

updater = Updater(TOKEN)
dispatcher = updater.dispatcher

items = [
  {
    "id": '1',
    "name": "–ø–∏—Ü—Ü–∞ –º—è—Å–Ω–∞—è",
    "total": 530.0
  },
  {
    "id": '2',
    "name": "–ø–∏—Ü—Ü–∞ –≥–∞–≤–∞–π—Å–∫–∞—è",
    "total": 480.0
  },
  {
    "id": '3',
    "name": "—Å–æ–∫ 2–ª",
    "total": 120.0
  }
]

help_message = '–ß–∞—Ç –±–æ—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ —á–µ–∫–∞ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —á–∞—Ç–∞\n\n' \
               '–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏ –ø–æ—Ç–æ–º –æ—Ç–º–µ—Ç—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å\n\n' \
               '–ù–∞–∂–º–∏—Ç–µ <b>–Ø –≤—Å–µ!</b> –∏ –∂–¥–∏—Ç–µ, –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–º–µ—Ç—è—Ç—Å—è\n\n' \
               '–ü–æ—Ç–æ–º —Ç–æ—Ç, –∫—Ç–æ —Å–∫–∏–Ω—É–ª —á–µ–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –µ–≥–æ, –∏ –±–æ—Ç —Ä–∞—Å—á–∏—Ç–∞–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏\n\n' \
               '–ù–∞–∂–º–∏ <b>–Ø –æ–ø–ª–∞—Ç–∏–ª!</b> –∏ –±–æ—Ç –∑–∞–∫—Ä–æ–µ—Ç –≤–∞—à –ø–µ—Ä–µ–≤–æ–¥'

start_message = MAN_ICON + ' –†–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫\n\n' \
                '1. –ö–∞–∂–¥—ã–π –∫–ª–∏–∫–∞–µ—Ç –ø–æ –ø–æ–∑–∏—Ü–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å\n' \
                '2. –ü–æ—Ç–æ–º –Ω–∞–∂–∏–º–∞–µ—Ç <b>–Ø –≤—Å–µ!</b>\n' \
                '3. –í –∫–æ–Ω—Ü–µ –≤–ª–∞–¥–µ–ª–µ—Ü —á–µ–∫–∞ –Ω–∞–∂–∏–º–∞–µ—Ç <b>–ó–∞–∫—Ä—ã—Ç—å</b>\n' \
                '4. –í—Å–µ –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞—é—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ –Ω–∞–∂–∏–º–∞—é—Ç <b>–Ø –ø–µ—Ä–µ–≤–µ–ª!</b>\n' \
                '5. –í–æ—Ç –∏ –≤—Å–µ!'


def start(bot, update):
  bot.sendMessage(chat_id=update.message.chat_id, text=help_message, parse_mode='HTML')


def handle_receipt(bot, update):
  chat_id = update.message.chat_id
  message_id = update.message.message_id + 1

  timestamp = time.time()
  file_name = '{}_{}_{}.png'.format(chat_id, message_id, timestamp)
  file_path = '/tmp/{}'.format(file_name)

  new_file = bot.getFile(update.message.photo[-1].file_id)
  new_file.download(file_path)

  # os.popen('~/Downloads/textcleaner -g -e none -f 10 -o 5 {} {}'.format(file_path, file_path))

  s3 = boto3.resource(
    's3',
    config=Config(signature_version='s3v4')
  )
  data = open(file_path, 'rb')
  s3.Bucket(AWS_S3_BUCKET).put_object(Key=file_name, Body=data)
  object_acl = s3.ObjectAcl(AWS_S3_BUCKET, file_name)
  object_acl.put(ACL='public-read')
  url = 'https://s3.{}.amazonaws.com/{}/{}'.format(AWS_REGION, AWS_S3_BUCKET, file_name)

  r = requests.post(OPENOCR_URL, json = {
    'img_url': url,
    'engine': 'tesseract',
    # 'preprocessors' : ['stroke-width-transform'],
    'engine_args': {
      'lang': 'rus',
      # 'config_vars': {
      #   'tessedit_char_whitelist': ' 0123456789–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—ë—è—á—Å–º–∏—Ç—å–±—é–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™–§–´–í–ê–ü–†–û–õ–î–ñ–≠–Å–Ø–ß–°–ú–ò–¢–¨–ë–Æ,:.-'
      # }
    }
  })

  content = r.text

  items = []

  inline_buttons = []
  for item in items:
    inline_buttons.append([InlineKeyboardButton('{} {}'.format(item['name'], item['total']), callback_data=item['id'])])

  message_text = start_message

  message_text += '\n\n' + content.encode('utf8')

  bot.sendMessage(chat_id=update.message.chat_id, text=message_text,
                  parse_mode='HTML', reply_markup=InlineKeyboardMarkup(inline_buttons))


def handle_receipt_stub(bot, update):
  owner_id = update.message.from_user.id
  owner_username = update.message.from_user.username
  owner_first_name = update.message.from_user.first_name
  owner_last_name = update.message.from_user.last_name

  chat_id = update.message.chat_id
  message_id = update.message.message_id + 1

  inline_buttos = [[InlineKeyboardButton('{} –Ø –≤—Å–µ!'.format(DONE_ICON), callback_data=DONE_BUTTON)],
                   [InlineKeyboardButton('{} –°–±—Ä–æ—Å–∏—Ç—å'.format(RESET_ICON), callback_data=RESET_BUTTON)],
                   [InlineKeyboardButton('{} –ó–∞–∫—Ä—ã—Ç—å'.format(HAND_ICON), callback_data=CLOSE_BUTTON)]]

  redis_client.hset(USER_KEY.format(owner_id), 'un', owner_username)
  redis_client.hset(USER_KEY.format(owner_id), 'fn', owner_first_name)
  redis_client.hset(USER_KEY.format(owner_id), 'ln', owner_last_name)

  redis_client.set(CHAT_MESSAGE_OWNER_KEY.format(chat_id, message_id), owner_id)
  redis_client.set(CHAT_MESSAGE_STATUS_KEY.format(chat_id, message_id), 'open')

  for item in items:
    redis_client.sadd(CHAT_MESSAGE_ITEMS_KEY.format(chat_id, message_id), item['id'])
    redis_client.hset(CHAT_MESSAGE_ITEM_KEY.format(chat_id, message_id, item['id']), 'name', item['name'])
    redis_client.hset(CHAT_MESSAGE_ITEM_KEY.format(chat_id, message_id, item['id']), 'price', item['total'])
    inline_buttos.append([InlineKeyboardButton('{} {}'.format(item['name'], int(item['total'])), callback_data=item['id'])])

  message_text = start_message

  bot.sendMessage(chat_id=chat_id, text=message_text, parse_mode='HTML',
                  reply_markup=InlineKeyboardMarkup(inline_buttos))


def button(bot, update):
  query = update.callback_query

  user_id = query.from_user.id
  user_username = query.from_user.username
  user_first_name = query.from_user.first_name
  user_last_name = query.from_user.last_name

  chat_id = query.message.chat_id
  message_id = query.message.message_id

  button_key = query.data

  inline_buttons = [[InlineKeyboardButton('{} –Ø –≤—Å–µ!'.format(DONE_ICON), callback_data=DONE_BUTTON)],
                   [InlineKeyboardButton('{} –°–±—Ä–æ—Å–∏—Ç—å'.format(RESET_ICON), callback_data=RESET_BUTTON)],
                   [InlineKeyboardButton('{} –ó–∞–∫—Ä—ã—Ç—å'.format(HAND_ICON), callback_data=CLOSE_BUTTON)]]

  redis_client.hset(USER_KEY.format(user_id), 'un', user_username)
  redis_client.hset(USER_KEY.format(user_id), 'fn', user_first_name)
  redis_client.hset(USER_KEY.format(user_id), 'ln', user_last_name)

  item_ids = redis_client.smembers(CHAT_MESSAGE_ITEMS_KEY.format(chat_id, message_id))

  update_time = '<i>–æ–±–Ω–æ–≤–ª–µ–Ω–æ {}</i>'.format(time.strftime('%I:%M %d/%m'))

  if button_key == PAID_BUTTON or button_key == CLOSE_BUTTON:
    if button_key == PAID_BUTTON:
      owner_id = redis_client.get(CHAT_MESSAGE_OWNER_KEY.format(chat_id, message_id))
      if int(owner_id) == int(user_id):
        return

      paid_ids = redis_client.smembers(CHAT_MESSAGE_PAID_KEY.format(chat_id, message_id))

      if str(user_id) not in paid_ids:
        paid_ids.add(str(user_id))
        redis_client.sadd(CHAT_MESSAGE_PAID_KEY.format(chat_id, message_id), user_id)

        owner_id = redis_client.get(CHAT_MESSAGE_OWNER_KEY.format(chat_id, message_id))
        owner_username = redis_client.hget(USER_KEY.format(owner_id), 'un')
        owner_first_name = redis_client.hget(USER_KEY.format(owner_id), 'fn')
        owner_last_name = redis_client.hget(USER_KEY.format(owner_id), 'ln')

        from_username = redis_client.hget(USER_KEY.format(user_id), 'un')
        from_first_name = redis_client.hget(USER_KEY.format(user_id), 'fn')
        from_last_name = redis_client.hget(USER_KEY.format(user_id), 'ln')

        message_text = '@{} ({} {}) –ø–µ—Ä–µ–≤–µ–ª @{} ({} {})'.format(from_username, from_first_name, from_last_name,
                                                                owner_username, owner_first_name, owner_last_name)
        bot.sendMessage(chat_id=chat_id, text=message_text, parse_mode='HTML')
      else:
        return

      user_ids = redis_client.smembers(CHAT_MESSAGE_DONE_KEY.format(chat_id, message_id))

      if len(paid_ids)+1 == len(user_ids):
        redis_client.set(CHAT_MESSAGE_STATUS_KEY.format(chat_id, message_id), CLOSED_STATUS)
        bot.editMessageText(text='<b>–ß–µ–∫ –∑–∞–∫—Ä—ã—Ç</b>', chat_id=chat_id,
                            message_id=message_id, parse_mode='HTML')
        return

    owner_id = redis_client.get(CHAT_MESSAGE_OWNER_KEY.format(chat_id, message_id))

    if button_key == CLOSE_BUTTON:
      if int(owner_id) != int(user_id):
        return
      redis_client.set(CHAT_MESSAGE_STATUS_KEY.format(chat_id, message_id), WAIT_PAYMENTS_STATUS)

    owner_username = redis_client.hget(USER_KEY.format(owner_id), 'un')
    owner_first_name = redis_client.hget(USER_KEY.format(owner_id), 'fn')
    owner_last_name = redis_client.hget(USER_KEY.format(owner_id), 'ln')

    users = {}

    item_ids = redis_client.smembers(CHAT_MESSAGE_ITEMS_KEY.format(chat_id, message_id))
    for item_id in item_ids:
      item_price = float(redis_client.hget(CHAT_MESSAGE_ITEM_KEY.format(chat_id, message_id, item_id), 'price'))
      item_users = redis_client.smembers(CHAT_MESSAGE_ITEM_USERS_KEY.format(chat_id, message_id, item_id))

      price_per_user = int(item_price / len(item_users))

      for user_id in item_users:
        if user_id not in users.keys():
          username = redis_client.hget(USER_KEY.format(user_id), 'un')
          first_name = redis_client.hget(USER_KEY.format(user_id), 'fn')
          last_name = redis_client.hget(USER_KEY.format(user_id), 'ln')

          users[user_id] = {
            'un': username,
            'fn': first_name,
            'ln': last_name,
            'total': 0
          }

        users[user_id]['total'] += price_per_user

    paid_user_ids = redis_client.smembers(CHAT_MESSAGE_PAID_KEY.format(chat_id, message_id))
    done_user_ids = redis_client.smembers(CHAT_MESSAGE_DONE_KEY.format(chat_id, message_id))
    left_user_ids = done_user_ids - paid_user_ids

    message_text = '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ @{} ({} {})\n\n'.format(owner_username, owner_first_name, owner_last_name)

    for user_id in left_user_ids:
      if int(user_id) != int(owner_id):
        message_text += '@{} ({} {}) - <b>{}</b> —Ä—É–±.\n'.format(users[user_id]['un'], users[user_id]['fn'],
                                                                users[user_id]['ln'], users[user_id]['total'])

    if len(paid_user_ids) > 0:
      message_text += '\n–£–∂–µ –ø–µ—Ä–µ–≤–µ–ª–∏:\n'
      for user_id in paid_user_ids:
        message_text += '@{} ({} {}) - <b>{}</b> —Ä—É–±.\n'.format(users[user_id]['un'], users[user_id]['fn'],
                                                                users[user_id]['ln'], users[user_id]['total'])
    message_text += '\n'

    inline_buttons = [[InlineKeyboardButton('{} —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ'.format(CARD_ICON), url='https://goo.gl/63JQi9')],
                      [InlineKeyboardButton('{} —á–µ—Ä–µ–∑ –ê–ª—å—Ñ–∞ –ë–∞–Ω–∫'.format(CARD_ICON), url='https://goo.gl/4SlQFh')],
                      [InlineKeyboardButton('{} —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –î–µ–Ω—å–≥–∏'.format(CARD_ICON), url='https://goo.gl/UyxLnY')],
                      [InlineKeyboardButton('{} —á–µ—Ä–µ–∑ –í–¢–ë'.format(CARD_ICON), url='https://goo.gl/Ns8vAD')],
                      [InlineKeyboardButton('{} –Ø —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª!'.format(UP_ICON), callback_data=PAID_BUTTON)]]

    message_text += update_time

    bot.editMessageText(text=message_text, chat_id=chat_id,
                        message_id=message_id, parse_mode='HTML',
                        reply_markup=InlineKeyboardMarkup(inline_buttons))
    return
  elif button_key == DONE_BUTTON:
    redis_client.sadd(CHAT_MESSAGE_DONE_KEY.format(chat_id, message_id), user_id)
  elif button_key == RESET_BUTTON:
    redis_client.srem(CHAT_MESSAGE_DONE_KEY.format(chat_id, message_id), user_id)
    for item_id in item_ids:
      redis_client.srem(CHAT_MESSAGE_ITEM_USERS_KEY.format(chat_id, message_id, item_id), user_id)
  else:
    redis_client.sadd(CHAT_MESSAGE_ITEM_USERS_KEY.format(chat_id, message_id, button_key), user_id)

  users = {}

  message_text = '{} –†–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫\n\n'.format(MAN_ICON)

  for item_id in item_ids:
    item_name = redis_client.hget(CHAT_MESSAGE_ITEM_KEY.format(chat_id, message_id, item_id), 'name')
    item_price = float(redis_client.hget(CHAT_MESSAGE_ITEM_KEY.format(chat_id, message_id, item_id), 'price'))

    message_text += '{} {} (<b>{}</b> —Ä—É–±.)\n'.format(PIZZA_ICON, item_name, int(item_price))

    item_user_ids = redis_client.smembers(CHAT_MESSAGE_ITEM_USERS_KEY.format(chat_id, message_id, item_id))
    for user_id in item_user_ids:
      if user_id not in users.keys():
        owner_username = redis_client.hget(USER_KEY.format(user_id), 'un')
        owner_first_name = redis_client.hget(USER_KEY.format(user_id), 'fn')
        owner_last_name = redis_client.hget(USER_KEY.format(user_id), 'ln')

        users[user_id] = {
          'un': owner_username,
          'fn': owner_first_name,
          'ln': owner_last_name,
          'total': 0
        }
      price_per_user = int(item_price / len(item_user_ids))
      users[user_id]['total'] += price_per_user
      message_text += '@{} ({} {}) - {} —Ä—É–±.\n'.format(users[user_id]['un'], users[user_id]['fn'],
                                                       users[user_id]['ln'], price_per_user)

    inline_buttons.append([InlineKeyboardButton('{} {}'.format(item_name, int(item_price)), callback_data=item_id)])
    message_text += '\n'

  done_user_ids = redis_client.smembers(CHAT_MESSAGE_DONE_KEY.format(chat_id, message_id))
  if len(done_user_ids):
    message_text += '–£–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å:\n'
    for user_id in done_user_ids:
      message_text += '{} @{} ({} {}) - <b>{}</b> —Ä—É–±.\n'.format(DONE_ICON, users[user_id]['un'], users[user_id]['fn'], users[user_id]['ln'], users[user_id]['total'])

    message_text += '\n'

  update_time = '<i>–æ–±–Ω–æ–≤–ª–µ–Ω–æ {}</i>'.format(time.strftime('%I:%M %d/%m'))

  bot.editMessageText(text='{} {}'.format(message_text, update_time),
                      chat_id=chat_id,
                      message_id=message_id,
                      parse_mode='HTML',
                      reply_markup=InlineKeyboardMarkup(inline_buttons))


dispatcher.add_handler(CommandHandler('start', start))
dispatcher.add_handler(CommandHandler('help', start))
dispatcher.add_handler(MessageHandler(Filters.photo, handle_receipt))
dispatcher.add_handler(CommandHandler('f', handle_receipt_stub))
dispatcher.add_handler(CallbackQueryHandler(button))

if MODE == 'webhook':
  updater.start_webhook(listen='0.0.0.0', port=PORT, url_path=TOKEN)
  updater.bot.setWebhook(URL + '/' + TOKEN)
  updater.idle()
else:
  updater.start_polling()
